name: Test Backend

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  test-backend:
    runs-on: ubuntu-latest
    env:
      # Database configuration
      POSTGRES_SERVER: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      # Backend configuration
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}

      # Project configuration
      PROJECT_NAME: RAGATUIT
      STACK_NAME: ragatuit
      ENVIRONMENT: local
      DOMAIN: localhost
      FRONTEND_HOST: http://localhost:5173
      BACKEND_CORS_ORIGINS: "http://localhost,http://localhost:5173,https://localhost,https://localhost:5173,http://localhost.tiangolo.com"
      SENTRY_DSN: ""
      DOCKER_IMAGE_BACKEND: backend
      DOCKER_IMAGE_FRONTEND: frontend

      # Canvas configuration
      CANVAS_CLIENT_ID: ${{ secrets.CANVAS_CLIENT_ID }}
      CANVAS_CLIENT_SECRET: ${{ secrets.CANVAS_CLIENT_SECRET }}
      CANVAS_REDIRECT_URI: ${{ secrets.CANVAS_REDIRECT_URI }}
      CANVAS_BASE_URL: ${{ secrets.CANVAS_BASE_URL }}

      # Grafana configuration
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Create .env file from secrets
        run: |
          cat > .env << EOF
          DOMAIN=localhost
          FRONTEND_HOST=http://localhost:5173
          ENVIRONMENT=local
          PROJECT_NAME=RAGatUIT
          STACK_NAME=ragatuit
          BACKEND_CORS_ORIGINS="http://localhost,http://localhost:5173,https://localhost,https://localhost:5173,http://localhost.tiangolo.com"
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          POSTGRES_SERVER=localhost
          POSTGRES_PORT=5432
          POSTGRES_DB=app
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          SENTRY_DSN=
          DOCKER_IMAGE_BACKEND=backend
          DOCKER_IMAGE_FRONTEND=frontend
          CANVAS_CLIENT_ID=${{ secrets.CANVAS_CLIENT_ID }}
          CANVAS_CLIENT_SECRET=${{ secrets.CANVAS_CLIENT_SECRET }}
          CANVAS_REDIRECT_URI=${{ secrets.CANVAS_REDIRECT_URI }}
          CANVAS_BASE_URL=${{ secrets.CANVAS_BASE_URL }}
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          EOF
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.4.15"
          enable-cache: true
      - run: docker compose down -v --remove-orphans
      - name: Start PostgreSQL
        run: docker compose up -d db
      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 60 bash -c 'until docker compose exec db pg_isready -U postgres; do sleep 1; done'
      - name: Setup test database
        run: uv run bash scripts/tests-prestart.sh
        working-directory: backend
      - name: Run tests
        run: uv run bash scripts/tests-start.sh "Coverage for ${{ github.sha }}"
        working-directory: backend
      - run: docker compose down -v --remove-orphans
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: backend/htmlcov
          include-hidden-files: true
